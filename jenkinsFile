pipeline{
    agent any
    stages {
        //  stage('Git') {
         //      steps {
       //            // Étape pour récupérer le code source depuis le référentiel Git
       //            checkout scm
        //       }
        //   }

        stage(" Maven Test "){
            steps {
                sh "mvn -version"
            }
        }
        stage("JDK Test "){
            steps {
                sh "java -version"
            }
        }
        stage("Getting Projet From Git"){
            steps {
                echo "Pulling"
            }
        }
        stage('Cleaning & Compiling') {
            steps{
                sh 'mvn clean compile'

        }
          }
                     stage('Unit Test') {
                         steps {
                             // Use Maven to run JUnit tests
                             sh 'mvn test'
                         }
                         post {
                             always {
                                 // Publish JaCoCo coverage reports
                                 jacoco(
                                     execPattern: '**/target/*.exec',
                                     classPattern: '**/target/classes',
                                     sourcePattern: '**/src/main/java'
                                 )
                             }
                         }
                     }
          stage('SonarQube CodeQuality Check') {
                      steps{
                          sh 'mvn sonar:sonar -Dsonar.login=admin -Dsonar.password=adminsonar'
                      }
                  }


                  //  stage('Deploy to Nexus') {
                   //           steps {

                    //          sh 'mvn deploy -DaltDeploymentRepository=deploymentRepo::default::http://localhost:8081/repository/maven-releases/ -Dnexus.user=admin -Dnexus.password=nexus'

                     //           }
                     //  }

         stage('Build and Deploy to nexus') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'nexus-credentials', usernameVariable: 'admin', passwordVariable: 'nexus')]) {
                    sh 'mvn deploy -DskipTests -DaltDeploymentRepository=deploymentRepo::default::http://localhost:8081/repository/maven-releases/ -Dnexus.user=\$NEXUS_USER -Dnexus.password=\$NEXUS_PASSWORD'
                }
            }
        }

      stage('Building Docker Image') {
                      steps {
                          script {
                            sh 'docker build -t cyndazagrouba/gestion-station-ski .'
                          }
                      }
                  }

       // stage('Deploy Image') {
        //  steps {
	     //     sh 'docker login -u cyndazagrouba -p cyndaDocker'
          //    sh  'docker push cyndazagrouba/gestion-station-ski'
          //       }
          //    }

     stage('Docker Push') {
      steps {
      	withCredentials([usernamePassword(credentialsId: 'docker-credentials', usernameVariable: 'cyndazagrouba', passwordVariable: 'cyndaDocker')]) {
        	sh "docker login -u ${env.cyndazagrouba} -p ${env.cyndaDocker}"
          sh 'docker push cyndazagrouba/gestion-station-ski'
        }
      }
    }

 stage('Docker Compose') {
     steps {
         script {

             // pour exécuter ma composition
             sh 'docker compose up -d'
         }
     }
 }

stage('Send Email Notification') {
    steps {
        script {
            def recipients = "cynda.zagrouba@esprit.tn"
            def buildStatus = currentBuild.result ?: 'UNKNOWN'
            def buildStartTime = currentBuild.startTimeInMillis
            def buildEndTime = currentBuild.endTimeInMillis
            def buildDuration = currentBuild.duration

            mail(
                subject: "Pipeline Status: ${buildStatus} - ${currentBuild.fullDisplayName}",
                body: """Dear Team,

The pipeline CI/CD for the project "Station Ski" has been executed.

Build Details:
- Project Name: Station Ski
- Build Status: ${buildStatus}
- User Triggering the Build: ${currentBuild.causes[0]?.userId ?: 'N/A'}
- Build Start Time: ${new Date(buildStartTime)}
- Build End Time: ${new Date(buildEndTime)}
- Build Duration: ${buildDuration / 1000} seconds

Additional Information:
- Git Commit: ${currentBuild.displayName}
- Jenkins Build URL: ${env.BUILD_URL}

Regards,
Your Jenkins Server""",
                to: recipients
            )
        }
    }
}
}
}