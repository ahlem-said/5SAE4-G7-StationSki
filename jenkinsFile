pipeline{
    agent any
    stages {
        //  stage('Git') {
         //      steps {
       //            // Étape pour récupérer le code source depuis le référentiel Git
       //            checkout scm
        //       }
        //   }

        stage(" Maven Test "){
            steps {
                sh "mvn -version"
            }
        }
        stage("JDK Test "){
            steps {
                sh "java -version"
            }
        }
        stage("Getting Projet From Git"){
            steps {
                echo "Pulling"
            }
        }
        stage('Cleaning & Compiling') {
            steps{
                sh 'mvn clean compile'

        }
          }

          stage('SonarQube CodeQuality Check') {
                      steps{
                          sh 'mvn sonar:sonar -Dsonar.login=admin -Dsonar.password=adminsonar'
                      }
                  }
            stage('Unit Test') {
                       steps {
                           // Use Maven to run JUnit tests
                           sh 'mvn test'
                       }
                   }

                  //  stage('Deploy to Nexus') {
                   //           steps {

                    //          sh 'mvn deploy -DaltDeploymentRepository=deploymentRepo::default::http://localhost:8081/repository/maven-releases/ -Dnexus.user=admin -Dnexus.password=nexus'

                     //           }
                     //  }

         stage('Build and Deploy to nexus') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'nexus-credentials', usernameVariable: 'admin', passwordVariable: 'nexus')]) {
                    sh 'mvn deploy -DskipTests -DaltDeploymentRepository=deploymentRepo::default::http://localhost:8081/repository/maven-releases/ -Dnexus.user=\$NEXUS_USER -Dnexus.password=\$NEXUS_PASSWORD'
                }
            }
        }

      stage('Building Docker Image') {
                      steps {
                          script {
                            sh 'docker build -t cyndazagrouba/gestion-station-ski .'
                          }
                      }
                  }

       // stage('Deploy Image') {
        //  steps {
	     //     sh 'docker login -u cyndazagrouba -p cyndaDocker'
          //    sh  'docker push cyndazagrouba/gestion-station-ski'
          //       }
          //    }

     stage('Docker Push') {
      steps {
      	withCredentials([usernamePassword(credentialsId: 'docker-credentials', usernameVariable: 'cyndazagrouba', passwordVariable: 'cyndaDocker')]) {
        	sh "docker login -u ${env.cyndazagrouba} -p ${env.cyndaDocker}"
          sh 'docker push cyndazagrouba/gestion-station-ski'
        }
      }
    }

 stage('Docker Compose') {
     steps {
         script {

             // pour exécuter ma composition
             sh 'docker compose up -d'
         }
     }
 }

        stage('Integration Tests') {
            steps {
                // Tester les services de l'application avec Postman ou Swagger
                sh 'newman run devops.json'  // Utilisez votre collection Postman
            }
        }


}
}